image: docker:19.03.0
stages:
  - clean_project
  - sonar-check-project
  - test
  - sonarqube-vulnerability-report
  - check_dependency_vulnérabilité
  - update_project_version
  - create_artifact_maven
  - deploy_artifact_to_nexus
  - build_docker_image
  - scan_docker_image
  - push_docker_image
sast:
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml
variables:
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
  M2_EXTRA_OPTIONS: "-s .m2/settings.xml"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  IMAGE_NAME: "chaima15/backend"
  IMAGE_TAG: "v1.0.0"
  GROUP_ID: "in.dashboard"
  ARTIFACT_ID: "springbootmongodb"
services:
  - name: docker:19.03.0-dind
    alias: docker
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]
clean_project_job:
  stage: clean_project
  image: maven:3-openjdk-17
  script:
    - mvn clean compile
  only:
    - test
sonar-check-project-jobs:
  stage: sonar-check-project
  image: maven:3-eclipse-temurin-17
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - mvn clean verify sonar:sonar
  allow_failure: true
  only:
    - test
sonarqube-vulnerability-report:
  stage: test
  script:
    - apk update
    - apk add --no-cache bash
    - apk add --no-cache curl
    - >
      curl -u "${SONAR_TOKEN}:" 
      "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=chaima98_backend_application_375bad1a-c84c-4462-a52d-aa2ce725ec64&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" 
      -o gl-sast-sonar-report.json
    - ls -lh gl-sast-sonar-report.json || echo "Le fichier n'a pas été généré correctement."
  allow_failure: true
  only:
    - test
  artifacts:
    expire_in: 1 day
    paths:
      - gl-sast-sonar-report.json
dependency_vulnérabilités_test_jobs:
  stage: check_dependency_vulnérabilité
  image: maven:3.8.4-openjdk-11
  before_script:
    - apt-get update && apt-get install -y curl
    - curl -fsSL https://deb.nodesource.com/setup_18.x | bash - # Installe Node.js
    - apt-get install -y nodejs
    - export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java)))) # Configure JAVA_HOME
  script:
    - npm install -g @appthreat/cdxgen
    - cdxgen -t java -o bom.json
    - >
      curl -X POST "${DEPENDENCY_TRACK_URL}/api/v1/bom"
      -H "Content-Type: multipart/form-data"
      -H "X-Api-Key: odt_ByX62KUxEyqFfc8XpyhD6WXAf3dSZnGM"
      -F "autoCreate=true"
      -F "projectName=services-backend"
      -F "projectVersion=1.0"
      -F "bom=@bom.json"
  only:
    - test
update_project_version_jobs:
  stage: update_project_version
  image: maven:3-openjdk-17
  script:
    - currentVersion=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | tr -d '\n')
    - pipelineCounter=$(printf "%02d" $(($CI_PIPELINE_ID % 100))) 
    - if [[ "$currentVersion" == *-SNAPSHOT ]]; then newVersion="${currentVersion%-SNAPSHOT}.$pipelineCounter"; else newVersion="${currentVersion}.$pipelineCounter"; fi
    - echo "Setting new version to $newVersion"
    - mvn versions:set -DnewVersion=$newVersion -DgenerateBackupPoms=false
  artifacts:
    paths:
      - . 
  only:
    - test 
create_jar_jobs:
  stage: create_artifact_maven
  image: maven:3-openjdk-17
  script:
    - mvn clean package -DSkipTests
    - echo "Packaging version $CI_NEW_VERSION"
  dependencies:
    - update_project_version_jobs
  artifacts:
    paths:
      - .  
  only:
    - test
deploy_artifact_To_Nexus_jobs:
  stage: deploy_artifact_to_nexus
  image: maven:3-openjdk-17
  script:
    - mvn $M2_EXTRA_OPTIONS deploy
  dependencies:
    - create_jar_jobs
  only:
    - test
build_project_image_jobs:
  stage: build_docker_image
  image: docker:19.03.0
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - unset DOCKER_HOST
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
  script:
    - docker build -t $IMAGE_NAME .
    - docker tag $IMAGE_NAME $IMAGE_NAME:$IMAGE_TAG
  only:
    - test
scan_docker_image:
  stage: scan_docker_image
  image: docker:19.03.0
  script:
  - apk update
  artifacts:
    paths:
      - trivy_report.md
  only:
    - test
push_image_jobs:
  stage: push_docker_image
  image: docker:19.03.0
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - unset DOCKER_HOST
    - echo $DOCKER_PASSWORD | docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
  script:
    - docker push $IMAGE_NAME:$IMAGE_TAG